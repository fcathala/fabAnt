<?xml version="1.0"?>
<project xmlns:sf="antlib:com.salesforce" name="fabPack" default="validate" >
  <!-- fabPack - Ant Migration Tool build.xml -->

  <description>
  fabPack - Fabrice Cathala - July-18
  </description>

  <!--  Time-out settings: 200 * 10,000 =  33 minutes -->
  <!--  Default polling = 200 -->
  <property name="sf.maxPoll" value="200"/>
  <!--  Default waiting = 10,000 (10 seconds) -->
  <property name="sf.pollWaitMillis" value="10000"/>
  <!--  Default batch size = 10 (bulk operations only) -->
  <property name="sf.batchsize" value="400"/>

  <!--  #WIP Direct access to environment variables -->
  <property environment="env"/>

  <!-- Locate Salesforce's Ant jar in the same folder as build.xml -->
  <taskdef
    resource="com/salesforce/antlib.xml"
    uri="antlib:com.salesforce">
    <classpath>
        <pathelement location="${toolkit}/ant-salesforce.jar" /> 
    </classpath>
  </taskdef>

  <!-- Add extra information to the log -->
  <target name="log">
  <tstamp>
    <format property="current.time" pattern="MM/dd/yyyy HH:mm:ss" />
    <format property="t.stamp" pattern="yyyyddMM-HHmmss" />
  </tstamp>
  <echo message="-------------------------------------------------"/>
  <echo message="fabPack log file: ${current.time}"/>
  <echo message="-------------------------------------------------"/>
  <echo message="folder prefix: ${t.stamp}"/>
  <echo message="-------------------------------------------------"/>
  <echo message="action: ${action}"/>
  <echo message="location: ${toolkit}/ant-salesforce.jar"/>
  <echo message="serverurl: ${sf.url}"/>
  <echo message="maxPoll: ${sf.maxPoll}"/>
  <echo message="pollWaitMillis: ${sf.pollWaitMillis}"/>
  <echo message="packageNames: ${mdt}"/>
  <echo message="singlePackage: true"/>
  <echo message="unpackaged: ${mdt}"/>
  <echo message="retrieveTarget: ${src}"/>
  <echo message="deployRoot: ${src}"/>
  <echo message="username: ${sf.usr}"/>
  <echo message="password: ${sf.psw}"/> <!-- Uncomment for troubleshooting only -->
  </target>

  <!-- Reset folders -->
  <target name="cleanup">
    <delete dir="${dir}"/>
    <mkdir dir="${dir}"/>
  </target>

  <!-- Move folders -->
  <target name="move">
    <copy todir="${dst}">
      <fileset dir="${src}"/>
    </copy>
  </target>

  <!-- Retrieve the metadata components listed in a Salesforce package ${mdt} -->
  <target name="retrievePKG">
    <antcall target="log">
      <param name="action" value="retrievePKG"/>
    </antcall>
    <antcall target="cleanup">
      <param name="dir" value="${src}"/>
    </antcall>
    <sf:retrieve
      username="${sf.usr}"
      password="${sf.psw}"
      serverurl="${sf.url}"
      maxPoll="${sf.maxPoll}"
      pollWaitMillis="${sf.pollWaitMillis}"
      packageNames="${mdt}"
      retrieveTarget="${src}"
      singlePackage="true"
    />
  </target>

  <!-- Retrieve the metadata components listed in the manifest file ${mdt} -->
  <target name="retrieveXML">
    <antcall target="log">
      <param name="action" value="retrieveXML"/>
    </antcall>
    <antcall target="cleanup">
      <param name="dir" value="${src}"/>
    </antcall>
    <sf:retrieve
      username="${sf.usr}"
      password="${sf.psw}"
      serverurl="${sf.url}"
      maxPoll="${sf.maxPoll}"
      pollWaitMillis="${sf.pollWaitMillis}"
      unpackaged="${mdt}"
      retrieveTarget="${src}"
    />
  </target>

  <!-- Validate the set of metadata stored in ${src} -->
  <target name="validate">
    <antcall target="log">
      <param name="action" value="validate"/>
    </antcall>
    <sf:deploy
      username="${sf.usr}"
      password="${sf.psw}"
      serverurl="${sf.url}"
      maxPoll="${sf.maxPoll}"
      pollWaitMillis="${sf.pollWaitMillis}"
      deployRoot="${src}"
      checkOnly="true"
      rollbackOnError="true"
     />
  </target>

  <!-- Validate the set of metadata stored in ${src} -->
  <target name="validateTest">
    <antcall target="log">
      <param name="action" value="validate"/>
    </antcall>
    <sf:deploy
      username="${sf.usr}"
      password="${sf.psw}"
      serverurl="${sf.url}"
      maxPoll="${sf.maxPoll}"
      pollWaitMillis="${sf.pollWaitMillis}"
      deployRoot="${src}"
      checkOnly="true"
      testLevel="RunLocalTests"
      rollbackOnError="true"
     />
  </target>

  <!-- Deploy the set of metadata stored in ${src} (run tests) -->
  <target name="deploy">
    <antcall target="log">
      <param name="action" value="deploy"/>
    </antcall>
    <sf:deploy
      username="${sf.usr}"
      password="${sf.psw}"
      serverurl="${sf.url}"
      maxPoll="${sf.maxPoll}"
      pollWaitMillis="${sf.pollWaitMillis}"
      deployRoot="${src}"
      rollbackOnError="true"
    />
  </target>

  <!-- Undeploy components                              -->
  <!-- Same as retrieveXML but with specific file names -->
  <!-- https://goo.gl/1fC5uZ                            -->
  <target name="delete">
    <antcall target="log">
      <param name="action" value="delete"/>
    </antcall>
    <sf:deploy
      username="${sf.usr}"
      password="${sf.psw}"
      serverurl="${sf.url}"
      maxPoll="${sf.maxPoll}"
      pollWaitMillis="${sf.pollWaitMillis}"
      deployRoot="${src}"
    />
  </target>

	<!-- Retrieve the information of all items of a particular metadata type -->
  <target name="listMetadata">
    <sf:listMetadata
      username="${sf.username}"
      password="${sf.password}"
      serverurl="${sf.serverurl}"
      metadataType="${sf.metadataType}"/>
  </target>

	<!-- Retrieve the information on all supported metadata type -->
    <target name="describeMetadata">
      <sf:describeMetadata
        username="${sf.username}"
        password="${sf.password}"
        serverurl="${sf.serverurl}"/>
    </target>
  <!--    sessionId="${sf.sessionId}" -->

  <!-- Retrieve all the items of a particular metadata type -->
    <target name="bulkRetrieve">
      <sf:bulkRetrieve
        username="${sf.username}"
        password="${sf.password}"
        sessionId="${sf.sessionId}"
        serverurl="${sf.serverurl}"
        maxPoll="${sf.maxPoll}"
        metadataType="${sf.metadataType}"
        retrieveTarget="retrieveUnpackaged"/>
    </target>

</project>
